# ==========================================================
# üß† Fun√ß√µes para a FLL
# ----------------------------------------------------------
# Criadores: Deivid e Jean
# Vers√£o: 10.1
# Fun√ß√µes dispon√≠veis:
#   - Andar reto com acelera√ß√£o suave
#   - Curvar com girosc√≥pio e compensa√ß√£o de in√©rcia
#   - Reset e parada segura de motores
# ==========================================================

# ------------------ Importa√ß√µes ---------------------------
from pybricks.hubs import PrimeHub
from pybricks.pupdevices import Motor, ColorSensor
from pybricks.parameters import Direction, Port, Axis, Color
from pybricks.tools import wait
from pybricks.robotics import DriveBase

# ------------------ Configura√ß√£o Inicial ------------------
# Inicializa o hub e define orienta√ß√µes
hub = PrimeHub(top_side=Axis.Z, front_side=Axis.X)

# Motores principais do drive base
left_motor = Motor(Port.E, Direction.COUNTERCLOCKWISE)
right_motor = Motor(Port.D)

# Motores adicionais (bra√ßos ou acess√≥rios)
a_motor = Motor(Port.A)
b_motor = Motor(Port.B)

# Configura√ß√£o da base motriz
# Par√¢metros:
#   60  -> di√¢metro da roda (mm)
#   110 -> dist√¢ncia entre rodas (mm)
drive_base = DriveBase(left_motor, right_motor, 60, 110)

# Configura√ß√µes iniciais de movimento
velocidade_curva = 260
aceleracao_curva = 455
drive_base.settings(turn_rate=velocidade_curva, turn_acceleration=aceleracao_curva)

# Constante de convers√£o (1 cm ‚âà 18.94 graus dos motores)
graus_por_cm = 18.94

# Habilita o uso do girosc√≥pio por padr√£o
drive_base.use_gyro(True)

# ==========================================================
# üîß Fun√ß√µes auxiliares
# ==========================================================

def reset():
    """Reseta o girosc√≥pio e os √¢ngulos dos motores principais."""
    hub.imu.reset_heading(0)
    left_motor.reset_angle(0)
    right_motor.reset_angle(0)


def parar():
    """Faz o rob√¥ parar com precis√£o, mantendo os motores travados."""
    left_motor.hold()
    right_motor.hold()


# ==========================================================
# üöó Fun√ß√µes principais de movimento
# ==========================================================

def andar_reto_suave(cm, pot, acele=445, usar_gyro=True):
    
    """
    Move o rob√¥ em linha reta com acelera√ß√£o e desacelera√ß√£o suaves.

    Par√¢metros:
        cm (float): dist√¢ncia em cent√≠metros (positiva = frente, negativa = tr√°s)
        pot (int): velocidade m√°xima do movimento
        acele (int): acelera√ß√£o linear (padr√£o = 445)
        usar_gyro (bool): define se o girosc√≥pio deve ser usado para manter a reta
    """
    drive_base.settings(straight_speed=pot, straight_acceleration=acele)
    hub.imu.reset_heading(0)
    drive_base.use_gyro(usar_gyro)
    parar()
    wait(100)
    drive_base.straight(cm * 10)  # Convers√£o de cm para mm


def turn(graus, potencia, acele=600):
    """
    Realiza uma curva precisa usando o girosc√≥pio, com compensa√ß√£o de in√©rcia.

    Par√¢metros:
        graus (float): √¢ngulo de rota√ß√£o (+ direita, - esquerda)
        potencia (int): velocidade da curva
        acele (int): acelera√ß√£o da curva (padr√£o = 600)
    """
    fator_compensacao = 0.97 
    hub.imu.reset_heading(0) # Reduz 3% do giro para evitar ultrapassagem do alvo
    drive_base.use_gyro(True)
    parar()
    wait(100)
    drive_base.settings(turn_rate=potencia, turn_acceleration=acele)
    drive_base.turn(graus * fator_compensacao)
